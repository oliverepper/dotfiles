#+Title: Emacs Config
#+author: Oliver Epper <oliver.epper@gmail.com>
#+property: header-args:emacs-lisp :tangle ~/.config/emacs/init.el :mkdirp yes

* Start

Following is the literate programming version of my Emacs config. It consists of elisp blocks that are tangled into XDG compatible config files. Heavy inspiration is drawn from [[https://github.com/daviwil/emacs-from-scratch][Emacs From Scratch]]

#+NAME: my-name
#+begin_src emacs-lisp :tangle no :eval (setq org-confirm-babel-evaluate nil) :results values
  (eval buffer-file-name)
#+end_src

#+NAME: my-info
#+begin_src emacs-lisp :tangle no :eval (setq org-confirm-babel-evaluate nil) :results values
  (eval (concat (format "Emacs version: %s\n" (emacs-version))
                   (format "org version: %s" (org-version))))
#+end_src

#+begin_src emacs-lisp :noweb yes
  ;; This file is generated from <<my-name()>>.
  ;; <<my-info()>>
#+end_src

* Keybindings/Features (incomplete list)
** add Todo into inbox =C-c t=
** Find Roam Note =C-c n f= 
* Startup Performance (disabled via :tangle no)

#+begin_src emacs-lisp :tangle no
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src

* Package System

The following sets up package sources, refreshes and installs use-package. It configures use-package to automatically install missing but required packages.

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t) ;; install missing packages automatically
#+end_src

* UI
A few things are needed to give Emacs are more modern and useable look. Your milage may vary.

** Window Config
I like to supress all startup messages. Even in the echo-area. If you want that too make sure to enter your username in the block below.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq inhibit-startup-echo-area-message "oliver") ;; enter your username
 
  (tool-bar-mode -1)

  (setq default-frame-alist
	'((width . 120)
	  (height . 46)
	  (vertical-scroll-bars . nil)
	  ;; some breathing room
	  (left-fringe . 25)
	  (right-fringe . 25)))
#+end_src

** Readablility

#+begin_src emacs-lisp
  (setq-default line-spacing 0.25)
#+end_src

** Themes
*** Classics

#+begin_src emacs-lisp :tangle ./early-init.el
  ;; (load-theme 'adwaita t)
  ;; (load-theme 'deeper-blue t)
  ;; (load-theme 'dichromacy t)
  ;; (load-theme 'leuven t)
  ;; (load-theme 'light-blue t) ;; obsolete
  ;; (load-theme 'manoj-dark t)
  ;; (load-theme 'misterioso t)
  ;; (load-theme 'modus-operandi t)
  ;; (load-theme 'modus- t)
  ;; (load-theme 'modus-vivendi t)
  ;; (load-theme 'tango-dark t)
  ;; (load-theme 'tango t)
  ;; (load-theme 'tsdh-dark t)
  ;; (load-theme 'tsdh-light t)
  ;; (load-theme 'wheatgrass t)
  ;; (load-theme 'whiteboard t)
  ;; (load-theme 'wombat t)
#+end_src

*** Doom Themes

#+begin_src emacs-lisp
  (use-package doom-themes
  ;;   :init (load-theme 'doom-1337 t))
  ;;   :init (load-theme 'doom-Iosvkem t))
  ;;   :init (load-theme 'doom-acario-dark t))
  ;;   :init (load-theme 'doom-acario-light t))
  ;;   :init (load-theme 'doom-ayu-light t))
  ;;   :init (load-theme 'doom-ayu-mirage t))
  ;;   :init (load-theme 'doom-badger t))
  ;;   :init (load-theme 'doom-challenger-deep t))
  ;;   :init (load-theme 'doom-city-lights t))
  ;;   :init (load-theme 'doom-dark+ t))
  ;;   :init (load-theme 'doom-dracula t))
  ;;   :init (load-theme 'doom-ephemeral t))
  ;;   :init (load-theme 'doom-fairy-floss t))
  ;;   :init (load-theme 'doom-flatwhite t))
  ;;   :init (load-theme 'doom-gruvbox-light t))
  ;;   :init (load-theme 'doom-gruvbox t))
  ;;   :init (load-theme 'doom-henna t))
  ;;   :init (load-theme 'doom-homage-black t))
  ;;   :init (load-theme 'doom-homage-white t))
  ;;   :init (load-theme 'doom-horizon t))
  ;;   :init (load-theme 'doom-ir-black t))
  ;;   :init (load-theme 'doom-laserwave t))
  ;;   :init (load-theme 'doom-manegarm t))
  ;;   :init (load-theme 'doom-material t))
  ;;   :init (load-theme 'doom-miramare t))
  ;;   :init (load-theme 'doom-molokai t))
  ;;   :init (load-theme 'doom-monokai-classic t))
  ;;   :init (load-theme 'doom-monokai-machine t))
  ;;   :init (load-theme 'doom-monokai-octagon t))
  ;;   :init (load-theme 'doom-monokai-pro t))
  ;;   :init (load-theme 'doom-monokai-ristretto t))
  ;;   :init (load-theme 'doom-monokai-spectrum t))
  ;;   :init (load-theme 'doom-moonlight t))
  ;;   :init (load-theme 'doom-nord-light t))
  ;;   :init (load-theme 'doom-nord t))
  ;;   :init (load-theme 'doom-nova t))
  ;;   :init (load-theme 'doom-oceanic-next t))
  ;;   :init (load-theme 'doom-old-hope t))
     :init (load-theme 'doom-one-light t))
  ;;   :init (load-theme 'doom-one t))
  ;;   :init (load-theme 'doom-opera-light t))
  ;;   :init (load-theme 'doom-opera t))
  ;;   :init (load-theme 'doom-outrun-electric t))
  ;;   :init (load-theme 'doom-palenight t))
  ;;   :init (load-theme 'doom-peacock t))
  ;;   :init (load-theme 'doom-plain-dark t))
  ;;   :init (load-theme 'doom-plain t))
  ;;   :init (load-theme 'doom-rouge t))
  ;;   :init (load-theme 'doom-shades-of-purple t))
  ;;   :init (load-theme 'doom-snazzy t))
  ;;   :init (load-theme 'doom-solarized-dark-high-contrast t))
  ;;   :init (load-theme 'doom-solarized-dark t))
  ;;   :init (load-theme 'doom-solarized-light t))
  ;;   :init (load-theme 'doom-sourcerer t))
  ;;   :init (load-theme 'doom-spacegrey t))
  ;;   :init (load-theme 'doom-tomorrow-day t))
  ;;   :init (load-theme 'doom-tomorrow-night t))
  ;;   :init (load-theme 'doom-vibrant t))
  ;;   :init (load-theme 'doom-wilmersdorf t))
  ;;   :init (load-theme 'doom-xcode t))
  ;;   :init (load-theme 'doom-zenburn t))
#+end_src

*** Doom Modeline

#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1))
    ;; :custom ((doom-modeline-height 10)))

  (defun oe/doom-modeline--font-height ()
    "Calc the actual char height of the mode-line."
    (+ (frame-char-height) 2))
  (advice-add #'doom-modeline--font-height :override #'oe/doom-modeline--font-height)
#+end_src

** Fonts

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Menlo" :height 140)
  (set-face-attribute 'variable-pitch nil :font "SF Pro Text" :height 140)
  (set-face-attribute 'mode-line nil :height 120)
  (with-eval-after-load 'org-faces
    (set-face-attribute 'org-block nil :font "Menlo" :height 140)
    (set-face-attribute 'org-table nil :font "Menlo" :height 140))
#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]]

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src

** Counsel & Ivy

#+begin_src emacs-lisp :tangle no
 (use-package counsel)

 (use-package ivy :demand
   :config
   (setq ivy-use-virtual-buffers t ivy-count-format "%d/%d "))

 (ivy-mode 1)
#+end_src

** Rainbow Delimiters
https://github.com/Fanael/rainbow-delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Keyboard

#+begin_src emacs-lisp
  (global-set-key "\M-l" (lambda () (interactive) (insert "@")))
  (global-set-key "\M-5" (lambda () (interactive) (insert "[")))
  (global-set-key "\M-6" (lambda () (interactive) (insert "]")))
  (global-set-key "\M-7" (lambda () (interactive) (insert "|")))
  (global-set-key "\M-/" (lambda () (interactive) (insert "\\")))
  (global-set-key "\M-8" (lambda () (interactive) (insert "{")))
  (global-set-key "\M-9" (lambda () (interactive) (insert "}")))
  (global-set-key "\M-n" (lambda () (interactive) (insert "~")))
#+end_src

* LaTeX

#+begin_src emacs-lisp
  (setenv "PATH" (concat "/Library/TeX/texbin" ":" (getenv "PATH")))
#+end_src

* Org Mode
** General
#+begin_src emacs-lisp
    (defun oe/configure-org-mode ()
      (variable-pitch-mode t)
      (visual-line-mode t)
      (setq org-return-follows-link t))
    ;;(add-hook 'org-mode-hook 'variable-pitch-mode)
    (add-hook 'org-mode-hook #'oe/configure-org-mode)
#+end_src

*** Enable export to Markdown

#+begin_src emacs-lisp
  (eval-after-load "org"
    '(require 'ox-md nil t))
#+end_src

*** Nicer Bullet Lists

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
#+end_src

*** Nicer Lists

#+begin_src emacs-lisp
  (font-lock-add-keywords 'org-mode
			  '(("^ *\\([-]\\) "
			     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))
#+end_src
  
*** Configure Babel Languages
**** Setup PATH

#+begin_src emacs-lisp
  (setenv "PATH" (concat "/opt/homebrew/bin" ":" (getenv "PATH")))
#+end_src

**** Configure Languages

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (shell . t)
       (swift . t)
       (swiftui . t)
       (C . t))))
#+end_src

**** ob-swift

#+begin_src emacs-lisp
  (use-package ob-swift)
#+end_src

**** ob-swiftui

#+begin_src emacs-lisp
  (use-package ob-swiftui)
  (ob-swiftui-setup)
#+end_src

*** Structure Templates

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("sw" . "src swift"))
    (add-to-list 'org-structure-template-alist '("swui" . "src swiftui"))
    (add-to-list 'org-structure-template-alist '("cpp" . "src C++ :includes '(iostream) :flags -std=c++20"))
    (add-to-list 'org-structure-template-alist '("clang" . "src C :includes '(stdio.h) :flags -std=c90")))
#+end_src

*** Auto-tangle Configuration files

#+begin_src emacs-lisp
  ;; automatically tangle this file when saved
  (defun oe/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
			(expand-file-name user-emacs-directory))
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'oe/org-babel-tangle-config)))
#+end_src

** Todo System

*** Shortcuts

#+begin_src emacs-lisp
  (define-key global-map (kbd "C-c a")
	      (lambda () (interactive) (org-agenda nil)))

  ;; open inbox
  (define-key global-map (kbd "C-c i")
	      (lambda () (interactive) (find-file "~/.org/agenda/inbox.org")))

  ;; plan
  (define-key global-map (kbd "C-c p")
	      (lambda () (interactive) (find-file "~/.org/agenda/tasks.org")))
#+end_src

*** Agenda Files

#+begin_src emacs-lisp
  (setq org-agenda-files
	'("~/.org/agenda/inbox.org"
	  "~/.org/agenda/tasks.org"
	  "~/.org/agenda/habits.org"))
#+end_src

*** Agenda Refile Targets

#+begin_src emacs-lisp
    (setq org-refile-targets
	'((buffer-file-name :maxlevel . 1)
	  ("tasks.org" :maxlevel . 1)
	  ("habits.org" :maxlevel . 1)))
#+end_src

*** Todo Keywords

#+begin_src emacs-lisp
    (setq org-todo-keywords
	  '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
	    (sequence "WAIT(w@/!)" "|" "COMPLETED(c)" "CANC(k@)")))
#+end_src

*** Tags

#+begin_src emacs-lisp
  (setq org-tag-alist
      '((:startgroup)
	; mutually exclusive tags here
	(:endgroup)
	("SF" . ?s)
	("POM" . ?p)))
#+end_src

*** Habits

#+begin_src emacs-lisp
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)
#+end_src

*** Agenda Custom Commands

#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
	'(("n" "Next Tasks"
	   ((todo "NEXT"
		  ((org-agenda-overriding-header "Next Tasks")))))))

;;  ("A" "All items from Tasks"
;;	   ((tags "-- * non existing * --"
;;		  ((org-agenda-files '("~/.org/agenda/tasks.org"))
;;		   (org-agenda-overriding-header "Blah Fahsel")))))
;;
#+end_src

*** Automatically save after refiling

#+begin_src emacs-lisp
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

*** Capture Templates

#+begin_src emacs-lisp
  (setq org-capture-templates
	'(("t" "Tasks/Projects")
	  ("tt" "Task" entry (file+olp "~/.org/agenda/inbox.org" "Inbox") "* %?\n %U\n %a\n %i" :empty-lines 1)))

  (define-key global-map (kbd "C-c t")
	      (lambda () (interactive) (org-capture nil "tt")))
#+end_src

** Org Roam

#+begin_src emacs-lisp
  (defvar oe/org-roam-directory "~/.org/roam")
  (unless (file-directory-p oe/org-roam-directory)
    (make-directory oe/org-roam-directory))

  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory oe/org-roam-directory)
    (org-roam-completion-everywhere t)
    (org-roam-graph-executable "/opt/homebrew/bin/dot")
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert)
	   :map org-mode-map
	   ("C-M-i"    . completion-at-point))
    :config
    (org-roam-setup))
#+end_src

The next block is required if we don't use ivy

#+begin_src emacs-lisp
  (define-key minibuffer-local-completion-map (kbd "SPC") 'self-insert-command)
#+end_src

** Jira

#+begin_src emacs-lisp
;;  (defvar oe/org-jira-directory "~/.org/jira")
;;  (unless (file-directory-p oe/org-jira-directory)
;;    (make-directory oe/org-jira-directory))
;;
;;  (use-package org-jira
;;     :config
;;     (setq jiralib-url "https://jira.starface.de")
;;     (setq org-jira-working-dir oe/org-jira-directory))
#+end_src

* Terminal
#+begin_src emacs-lisp
  (use-package vterm
  :commands vterm
  :config
  (setq vterm-max-scrollback 10000))
#+end_src

* IDE-Features
** lsp-mode

#+begin_src emacs-lisp
  (defun oe/lsp-mode-setup()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsd-deferred)
    :hook (lsp-mode . oe/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))
#+end_src

** lsp-ui

#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))
  ;;    :custom
  ;;    (lsp-ui-doc-use-webkit -1))
  ;;	(lsp-ui-doc-position 'bottom)
  ;;	(lsp-ui-doc-show-with-cursor t))
#+end_src

** lsp-sourcekit

#+begin_src emacs-lisp
  (use-package lsp-sourcekit
    :after lsp-mode
    :config
    (setq lsp-sourcekit-executable (string-trim (shell-command-to-string "xcrun --find sourcekit-lsp"))))
#+end_src

** swift-mode

#+begin_src emacs-lisp
  (use-package swift-mode
    :hook (swift-mode . lsp-deferred))
#+end_src

** Company Mode

#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
		  ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
	    ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

    (use-package company-box
      :hook (company-mode . company-box-mode))
#+end_src

** dap-mode

#+begin_src emacs-lisp
;;  (use-package dap-mode
;;    :config
;;    (require 'dap-lldb))
#+end_src

