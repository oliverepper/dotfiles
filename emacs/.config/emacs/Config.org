# -*- mode: org -*-
#+author: Oliver Epper <oliver.epper@gmail.com>
#+property: header-args:emacs-lisp :tangle ~/.config/emacs/init.el :mkdirp yes
#+STARTUP: overview

* Start
:PROPERTIES:
:VISIBILITY: children
:END:

This is the literate programming version of my Emacs config. Blocks are tangled into XDG compatible config files in [[~/.config/emacs/init.el][init.el]]. See [[#auto_tangle][Auto-tangle]].

** Emacs Installation

#+begin_src shell
  brew tap railwaycat/emacsmacport
  brew install --cask emacs-mac
#+end_src

* Generate ~init.el~ Header

#+NAME: filename
#+begin_src emacs-lisp :tangle no :eval (setq org-confirm-babel-evaluate nil) :results values
  (eval buffer-file-name)
#+end_src

#+NAME: version_info
#+begin_src emacs-lisp :tangle no :eval (setq org-confirm-babel-evaluate nil) :results values
  (eval (concat (format "Emacs version: %s\n" (emacs-version))
                (format "Org version: %s" (org-version))))
#+end_src

#+begin_src emacs-lisp :noweb yes
  ;; This file is generated from <<filename()>>
  ;; <<version_info()>>
#+end_src

** Start Message

#+begin_src emacs-lisp
(message "Loading %s" (or load-file-name buffer-file-name))
#+end_src

* Basic Setup

** gc-cons-threshold

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Custom file (never loaded)
#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
#+end_src

** Font & Line-Spacing

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "JetBrains Mono:size=14")
  (set-face-attribute 'fixed-pitch nil :font (face-attribute 'default :font))
  (setq-default line-spacing 0.3)
#+end_src

** Window Layout

#+begin_src emacs-lisp
  (require 'cl-lib)
  (dolist (elem
	   '(
	     (width			.	0.9)
	     (height			.	0.95)

	     (user-position		.	t)
	     (left			.	0.5)
	     (top			.	0.5)

	     (ns-transparent-titlebar	.	t)

	     (internal-border-width	.	8)
	     (left-fringe		.	16)
	     (right-fringe		.	16)
	     ))
    (cl-pushnew elem default-frame-alist))

  (tool-bar-mode	-1)
  (scroll-bar-mode	-1)
#+end_src

** package & use-package

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)		
  (setq use-package-always-ensure t)
#+end_src

* Modus Themes

** Setup

#+begin_src emacs-lisp
  (defun oe/save-selected-theme (theme)
    (with-temp-file (expand-file-name "selected-theme.el" user-emacs-directory)
      (insert (format "(load-theme '%s :no-confirm)\n" theme))))

  (use-package modus-themes
    :demand
    :custom
    (modus-themes-to-toggle		'(modus-operandi modus-vivendi))
    (modus-themes-disable-other-themes	t)

    (modus-themes-italic-constructs	t)
    (modus-themes-variable-pitch-ui	t)
    (modus-themes-mixed-fonts		t)

    (modus-themes-prompts		'(bold))
    (modus-themes-org-blocks		'tinted-background)

    (modus-themes-headings
     '(
       (1			. (1.215))
       (2			. (1.138))
       (3			. (1.076))
       (4			. (1.0))
       (5			. (0.937))

       (agenda-date		. (variable-pitch italic 1.138))
       (agenda-structure	. (variable-pitch light 1.215))
       (t			. (medium))
       ))

    (modus-themes-common-palette-overrides
     '(
       (border-mode-line-active		bg-mode-line-active)
       (border-mode-line-inactive	bg-mode-line-inactive)
       ))
    :bind ("<f5>" . (lambda ()
		      (interactive)
		      (oe/save-selected-theme (modus-themes-toggle))))
    :config
    (let ((last (expand-file-name "selected-theme.el" user-emacs-directory)))
      (if (file-exists-p last)
	  (load last)
	(load-theme (car modus-themes-to-toggle) :no-confirm))))
#+end_src

** Cycle through all Modus-Themes

#+begin_src emacs-lisp
  (defun oe/rotate-list (list)
    (when list
      (append (cdr list) (list (car list)))))

  (defun oe/cycle-themes (theme-list)
    (load-theme (car theme-list) :no-confirm)
    (oe/rotate-list theme-list))

  (defun oe/cycle-themes-and-print-log-msg ()
    (interactive)
    (defvar modus-themes--cycle modus-themes-items)
    (setq modus-themes--cycle (oe/cycle-themes modus-themes--cycle))
    (let ((selected-theme (car (reverse modus-themes--cycle))))
      (message "Theme: %s selected" selected-theme)
      (oe/save-selected-theme selected-theme)))

  (global-set-key (kbd "<f4>") #'oe/cycle-themes-and-print-log-msg)
#+end_src

* Do Things Only When on macOS

** Start Condition â€“ macOS
#+begin_src emacs-lisp
  (when (memq window-system '(mac ns))
#+end_src

** Use gls instead of ls in dired

#+begin_src emacs-lisp
  (if (executable-find "gls")
      (setq insert-directory-program "gls")
    (message "Please install GNU coreutils via `brew install coreutils`"))
#+end_src

** Move Files to Trash

#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash			t)
  (setq mac-system-move-file-to-trash-use-finder	t)
#+end_src

** Reveal in Finder

[[https://github.com/kaz-yos/reveal-in-osx-finder][reveal-in-osx-finder]]

#+begin_src emacs-lisp
  (use-package reveal-in-osx-finder
    :commands reveal-in-osx-finder 
    :bind ("C-c f" . reveal-in-osx-finder))
#+end_src

** End Condition - macOS
#+begin_src emacs-lisp
  )
#+end_src

* delight

[[https://elpa.gnu.org/packages/delight.html][delight]]

#+begin_src emacs-lisp
  (use-package delight
    :demand)
#+end_src

* windmove

#+begin_src emacs-lisp
  (global-set-key (kbd "A-<left>") #'windmove-left)
  (global-set-key (kbd "A-<up>") #'windmove-up)
  (global-set-key (kbd "A-<right>") #'windmove-right)
  (global-set-key (kbd "A-<down>") #'windmove-down)
#+end_src

* tab-bar

#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (tab-bar-new-tab-choice "*scratch*"))
#+end_src

* visual-line-mode

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (global-visual-line-mode t))
#+end_src

* global-auto-revert-mode

Automatically revert buffers when file changes on disk.

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

* calendar-week-day-start

#+begin_src emacs-lisp
  (setq calendar-week-start-day 1)
#+end_src

* Additional Key Bindings

Some more are implemented where needed, use isearch to see them all.

* recentf-mode

#+begin_src emacs-lisp
  (use-package emacs
  :custom
  (recentf-exclude '(".excluded"))
  (recentf-max-menu-items 10)
  (recentf-max-saved-items 10)
  :config
  (recentf-mode t)
  :bind ("C-c r" . #'recentf-open-files))
#+end_src

* dumb-jump

[[https://github.com/jacktasia/dumb-jump][dumb-jump]]

#+begin_src emacs-lisp
  (use-package dumb-jump
    :commands dumb-jump-xref-activate
    :init
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src

* which-key

[[https://github.com/justbur/emacs-which-key][which-key]]

#+begin_src emacs-lisp
  (use-package which-key
    :demand
    :custom
    (which-key-idle-delay 0.3)
    :delight
    :config
    (which-key-mode)
    )
#+end_src

* display-line-numbers

#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (display-line-numbers-type	'visual)
    (display-line-numbers-width	3)
    :hook
    ((org-mode prog-mode). display-line-numbers-mode)
    )
#+end_src

* rainbow-delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* adaptive wrap

[[https://elpa.gnu.org/packages/adaptive-wrap.html][adaptive-wrap]]

#+begin_src emacs-lisp
  (use-package adaptive-wrap
    :custom
    (adaptive-wrap-extra-indent 3)
    :hook (text-mode . adaptive-wrap-prefix-mode))
#+end_src

* docker-compose-mode

#+begin_src emacs-lisp
  (use-package docker-compose-mode)
#+end_src

* flymake-shellcheck

[[https://github.com/federicotdn/flymake-shellcheck.git][flymake-shellcheck]]

#+begin_src emacs-lisp
  (use-package flymake-shellcheck
    :commands flymake-shellcheck-load
    :hook
    (sh-mode . flymake-shellcheck-load)
    (sh-mode . flymake-mode)
    )
#+end_src

* vertico

[[https://github.com/minad/vertico][vertico]]

#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode))
#+end_src

* marginalia-mode

#+begin_src emacs-lisp
  (use-package marginalia
    :bind (:map minibuffer-local-map
		("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src

* orderless

[[https://github.com/oantolin/orderless][orderless]]

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides
     '(
       (file (styles basic partial-completion))
       )))
#+end_src

* Google Chrome

** allow --incognito mode

#+begin_src emacs-lisp
  (dolist (elem
	   '(
	     (browse-url-browser-function . browse-url-generic)
	     (browse-url-generic-program . "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome")
	     (browse-url-generic-args . ("--incognito"))
	     ))
    (cl-pushnew elem safe-local-variable-values))
#+end_src

* Org Mode

** Setup

#+begin_src emacs-lisp
  (use-package org
    :custom 
    (org-return-follows-link	t)
    :commands (org-mode org-agenda)
    :config
    (progn
      (require 'org-mouse))
    )
#+end_src

** Configure Languages for SRC blocks

*** ob-swift

#+begin_src emacs-lisp
  (use-package ob-swift)
#+end_src

*** ob-swiftui

#+begin_src emacs-lisp
  (use-package ob-swiftui)
#+end_src

*** Load Languages

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (emacs-lisp	. t)
       (shell		. t)
       (swift		. t)
       (swiftui		. t)
       (C		. t)
       (python		. t)
       )))
#+end_src

** Structure Templates

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("el"		.	"src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sh"		.	"src shell"))
    (add-to-list 'org-structure-template-alist '("clang"	.	"src C :includes '(stdio.h) :flags -std=c90"))
    (add-to-list 'org-structure-template-alist '("cpp"		.	"src C++ :includes '(iostream) :flags -std=c++20"))
    (add-to-list 'org-structure-template-alist '("sw"		.	"src swift"))
    (add-to-list 'org-structure-template-alist '("swui"		.	"src swiftui"))
    (add-to-list 'org-structure-template-alist '("py"		.	"src python"))
    )
#+end_src

** Auto Tangle
:PROPERTIES:
:CUSTOM_ID: auto_tangle
:END:

#+begin_src emacs-lisp
  (defun oe/org-babel-tangle-config ()
    (let ((file-dir (file-name-directory (buffer-file-name))))
      (when (or (string-prefix-p (expand-file-name user-emacs-directory) file-dir)
                (string-prefix-p (expand-file-name "~/dotfiles/emacs/.config/emacs/") file-dir))
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle)))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'oe/org-babel-tangle-config)))
#+end_src

** roam

#+begin_src emacs-lisp
  ;; create roam directory if missing
  (defconst oe/org-roam-directory "~/org/roam")
  (unless (file-directory-p oe/org-roam-directory)
    (make-directory oe/org-roam-directory t))

  (use-package org-roam
    :custom
    (org-roam-directory oe/org-roam-directory)
    (org-roam-node-display-template
     (concat
      "${title:*}" (propertize "${tags:25}" 'face 'org-tag)
      ))
    :bind
    (
     ("C-c n f" . org-roam-node-find)
     ("C-c n i" . org-roam-node-insert)
     )
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies)
    (org-roam-setup))
#+end_src

** agenda

#+begin_src emacs-lisp
  (defconst oe/org-agenda-directory "~/org/agenda")
  (unless (file-directory-p oe/org-agenda-directory)
    (make-directory oe/org-agenda-directory t))

  (defconst oe/org-agenda-tasks-file
    (expand-file-name "Aufgaben.org"
		      oe/org-agenda-directory))

  (defconst oe/org-agenda-appointments-file
    (expand-file-name "Termine.org"
		      oe/org-agenda-directory))

  (setq org-agenda-files
	(list
	 oe/org-agenda-tasks-file
	 oe/org-agenda-appointments-file
	 ))

  ;; don't bother me too much. I have a condition
  (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
  (setq org-agenda-skip-scheduled-if-done t)

  ;; create files if necessary
  (mapcar (lambda (filename)
	    (unless (file-exists-p filename)
	      (write-region "" nil filename nil nil nil 'excl)
	      (when (equal filename oe/org-agenda-tasks-file)
		(with-temp-buffer
		  (insert "* Inbox\n")
		  (append-to-file (point-min) (point-max) filename)))))
	  org-agenda-files)

  (global-set-key (kbd "C-c a") #'org-agenda)
#+end_src

*** Capture Templates

#+begin_src emacs-lisp
  (setq org-capture-templates
	'(
	  ("a" "Aufgabe" entry (file+olp oe/org-agenda-tasks-file "Inbox")
	   "* %?\n %U\n %a\n %i" :empty-lines 1)
	  ("t" "Termin" entry (file oe/org-agenda-appointments-file)
	   "* %^{prompt}\n %^t\n %i" :empty-lines 1)
	  )
	)
#+end_src

*** Refile Targets

#+begin_src emacs-lisp
  (setq org-refile-targets
	`(
	  (buffer-file-name :maxlevel . 1)
	  (,(file-name-nondirectory oe/org-agenda-tasks-file) :maxlevel . 2)
	  (,(file-name-nondirectory oe/org-agenda-appointments-file) :maxlevel . 2)
	  ))
#+end_src

*** Tags

#+begin_src emacs-lisp
  (setq org-tag-alist
	'(
	  (:startgroup)
	  ;; mutually exclusive tags go here
	  ("Arbeit" . ?a)
	  ("Privat" . ?p)
	  (:endgroup)
	  ))
#+end_src

* Generate ~init.el~ Footer

** Done Message

#+begin_src emacs-lisp
  (message "Done loading: %s" (or load-file-name buffer-file-name))

  (defun oe/startup-message ()
      (message "Emacs loaded in %s with %d garbage collections."
	       (format "%.2f seconds"
		       (float-time
			(time-subtract after-init-time before-init-time)))
	       gcs-done))
  
  (add-hook 'emacs-startup-hook #'oe/startup-message)
#+end_src

* Disabled
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]]

#+begin_src emacs-lisp
  (use-package vterm
    :custom
    (vterm-max-scrollback 10000))
#+end_src

