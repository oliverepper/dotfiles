#-*- mode: org -*-
#+author: Oliver Epper <oliver.epper@gmail.com>
#+property: header-args:emacs-lisp :tangle ~/.config/emacs/init.el :mkdirp yes
#+STARTUP: overview

* Intro
:PROPERTIES:
:VISIBILITY: all
:END:

This is the literate programming version of my Emacs config. Blocks are tangled into XDG compatible config files in [[~/.config/emacs/init.el][init.el]]. See [[#auto_tangle][Auto-tangle]].

** Features

- a comment in [[~/.config/emacs/init.el][init.el]] hinting that the file is generated
- automatically tangle this file into ~init.el~

*** TODO add the missing parts
- would be cool to generate a list of features collected from the =ENABLES= property.

* Basic Config

** Generate ~init.el~ Header

#+NAME: filename
#+begin_src emacs-lisp :tangle no :eval (setq org-confirm-babel-evaluate nil) :results values
  (eval buffer-file-name)
#+end_src

#+NAME: version_info
#+begin_src emacs-lisp :tangle no :eval (setq org-confirm-babel-evaluate nil) :results values
  (eval (concat (format "Emacs version: %s\n" (emacs-version))
                (format "Org version: %s" (org-version))))
#+end_src

#+begin_src emacs-lisp :noweb yes
  ;; This file is generated from <<filename()>>
  ;; <<version_info()>>
#+end_src

** Custom Variables

#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
#+end_src

** Packages

Sets up packages sources, refreshes and installs ~use-package~. Configures ~use-package~ to automatically install missing but required packages.

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t) ;; install missing packages automatically
#+end_src

** Auto-tangle
:PROPERTIES:
:CUSTOM_ID: auto_tangle
:END:

#+begin_src emacs-lisp
  (defun oe/org-babel-tangle-config ()
    (let ((file-dir (file-name-directory (buffer-file-name))))
      (when (or (string-prefix-p (expand-file-name user-emacs-directory) file-dir)
                (string-prefix-p (expand-file-name "~/dotfiles/emacs/.config/emacs/") file-dir))
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle)))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'oe/org-babel-tangle-config)))
#+end_src

** Key Bindings

#+begin_src emacs-lisp
  (defun oe/open-new-line ()
    (interactive)
    (end-of-line)    
    (newline)
    (indent-according-to-mode))

  (global-set-key (kbd "C-c r") #'recentf-open-files)
  (global-set-key (kbd "C-c c") #'oe/frame-recenter)
  (global-set-key (kbd "<f4>") #'oe/cycle-themes-and-print-log-msg)
  (global-set-key (kbd "C-c o") #'oe/open-new-line)
#+end_src

** Editing

*** Audio Bell

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

*** Move Text

Move text with M-up, or M-down

#+begin_src emacs-lisp
  (use-package move-text
    ;; :config
    ;; (move-text-default-bindings)
    :bind
    ("C-c <up>" . move-text-up)
    ("C-c <down>" . move-text-down)
    )
#+end_src

*** Automatically revert buffers

Automatically revert buffers when file changes on disk

#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

** File Settings

*** Trash / Recycle Bin Settings

#+begin_src emacs-lisp
  (when (memq window-system '(mac ns))
    (defun system-move-file-to-trash (path)
      "Moves file at PATH to the macOS Trash accorsing to 'move-file-to-trash' convention. Relies on the command-line utility 'trash' to be installed."
      (shell-command (concat "trash -v \"" path "\""
                             "| sed -e 's/^/Tashed: /'")
                     nil ;; name of output buffer
                     "*Trash Error Buffer*")))

  (setq trash-directory "~/.Trash") ;; fallback for 'move-file-to-trash'
  (setq delete-by-moving-to-trash t)
#+end_src

*** Reveal in OSX Finder

#+begin_src emacs-lisp
  (use-package reveal-in-osx-finder
    :bind ("C-c f" . #'reveal-in-osx-finder))
#+end_src

* UI

** Window Config

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq inhibit-startup-echo-area-message "oliver") ;; enter your username

  (tool-bar-mode -1)

  (setq default-frame-alist
        '(
          (user-position . t)
          (top . 0.5)
          (left . 0.5)
          (width . 160)
          (height . 45)
          (vertical-scroll-bars . nil)
          ;; add some breathing room
          ;; (left-fringe . 20)
          ;; (right-fringe . 20)
          ))

  (defun oe/frame-recenter (&optional frame)
    "Center FRAME on the screen.
  FRAME can be a frame name, a terminal name, or a frame.
  If FRAME is omitted or nil, the current frame is used."
    (interactive)
    (unless (eq 'maximised (frame-parameter frame 'fullscreen))
      (modify-frame-parameters
       frame '(
               (user-position . t)
               (top . 0.5)
               (left . 0.5)
               ))))

  (defun oe/frame-restore-main-frame ()
    (interactive)
    (modify-frame-parameters nil default-frame-alist))
#+end_src

** Theme

*** Modus Themes

#+begin_src emacs-lisp
  (use-package modus-themes
    :config
    (setq modus-themes-disable-other-themes t)
    ;; overrides
    ;; (setq modus-themes-common-palette-overrides
    ;;   '(
    ;;     (border-mode-line-active bg-mode-line-active)
    ;;     (border-mode-line-inactive bg-mode-line-inactive)
    ;;     (bg-region "mac:selectedTextBackgroundColor")
    ;;     (fg-region "mac:selectedTextColor"))
    ;;   )

    :init
    (setq modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted))

    (defun oe/modus-themes-init ()
      ;; cadr because I want to start with vivendi
      (load-theme (cadr modus-themes-to-toggle) :no-confirm)
      (defvar modus-themes--cycle-themes modus-themes-items))

    :bind ("<f5>" . modus-themes-toggle)
    :hook (after-init . oe/modus-themes-init))
#+end_src

*** Shuffle Themes

#+begin_src emacs-lisp
  ;; helper function
  (defun oe/org-mode-restart-when-enabled ()
    "Restarts org-mode then it is active in the current buffer."
    (when (fboundp 'org-mode)
      (when (eq major-mode 'org-mode)
        (org-mode-restart))))

  ;; cycle through themes
  (defun oe/rotate-list (list)
    (when list
      (append (cdr list) (list (car list)))))

  (defun oe/cycle-themes (theme-list)
    (load-theme (car theme-list) :no-confirm)
    (oe/org-mode-restart-when-enabled)
    (oe/rotate-list theme-list))

  (defun oe/cycle-themes-and-print-log-msg ()
    (interactive)
    (setq modus-themes--cycle-themes (oe/cycle-themes modus-themes--cycle-themes))
    (message "Theme: %s selected" (car (reverse modus-themes--cycle-themes))))
#+end_src

*** advice modus-theme-toggle with org-mode-restart

#+begin_src emacs-lisp
  (advice-add 'modus-themes-toggle :after #'oe/org-mode-restart-when-enabled)
#+end_src

** Fonts

#+begin_src emacs-lisp
  (set-frame-font "JetBrains Mono-13" nil t)
#+end_src

** Readability

*** Line-Spacing

#+begin_src emacs-lisp
  (setq-default line-spacing 0.2)
#+end_src

*** Adaptive-Wrap

#+begin_src emacs-lisp
  (use-package adaptive-wrap)

  (defun oe/enable-indent-for-wrapped-lines ()
    (visual-line-mode 1)
    (adaptive-wrap-prefix-mode 1)
    (setq-default adaptive-wrap-extra-indent 6))

  (add-hook 'text-mode-hook 'oe/enable-indent-for-wrapped-lines)
#+end_src

** Line Numbers

#+begin_src emacs-lisp
  (setq-default display-line-numbers 'visual)
  (setq-default display-line-numbers-width 3)

  (custom-set-faces
   '(line-number ((t (:inherit default :weight light))))
   '(line-number-current-line ((t (:inherit default :weight light)))))
#+end_src

** Rainbow Delimiters

https://github.com/Fanael/rainbow-delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Open with recent files

#+Begin_src emacs-lisp
  (recentf-mode 1)
  (when (file-exists-p (locate-user-emacs-file "recentf"))
    (recentf-open-files))
#+end_src

* Org Mode

** General

#+begin_src emacs-lisp
  (defun oe/configure-org-mode ()
    (require 'org-mouse)
    (setq org-return-follows-link t)
    (setq org-catch-invisible-edits 'error))

  (add-hook 'org-mode-hook #'oe/configure-org-mode)
  (add-hook 'org-mode-hook #'org-indent-mode)
#+end_src

*** Font-Faces

I took the scales from here [[https://typescale.com][typescale.com]]. Scale is `Major Second`.

#+begin_src emacs-lisp
  (defun oe/setup-org-level-faces ()
    (dolist (face '((org-level-1 . 1.424)
                    (org-level-2 . 1.266)
                    (org-level-3 . 1.125)
                    (org-level-4 . 1.0)
                    (org-level-5 . 0.889)))
      (set-face-attribute (car face) nil
                          :font "JetBrains Mono"
                          :weight 'normal
                          :height (truncate (* 130 (cdr face))))))

  (add-hook 'org-mode-hook 'oe/setup-org-level-faces)
#+end_src

*** Nicer Bullet Lists / org-superstar

#+begin_src emacs-lisp
  (use-package org-superstar
    :after org
    :init
    (setq org-superstar-item-bullet-alist
          '((?* . ?•)
            (?+ . ?•)
            (?- . ?•)))
    :hook (org-mode . org-superstar-mode))

  (setq org-superstar-leading-bullet " ")
#+end_src

*** Configure Languages for SRC blocks

**** ob-swift

#+begin_src emacs-lisp
  (use-package ob-swift)
#+end_src

**** ob-swiftui

#+begin_src emacs-lisp
  (use-package ob-swiftui
    :config
    (ob-swiftui-setup))
#+end_src

**** Load Languages

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (shell . t)
       (swift . t)
       (swiftui . t)
       (C . t))))
#+end_src

*** Structure Templates

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("clang" . "src C :includes '(stdio.h) :flags -std=c90"))
    (add-to-list 'org-structure-template-alist '("cpp" . "src C++ :includes '(iostream) :flags -std=c++20"))
    (add-to-list 'org-structure-template-alist '("sw" . "src swift"))
    (add-to-list 'org-structure-template-alist '("swui" . "src swiftui")))
#+end_src

* Completion

** corfu

[[https://github.com/minad/corfu][COmpletion in Region FUnction]]

#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-exclude-modes'.
    :init
    (global-corfu-mode))
#+end_src

** cape

[[https://github.com/minad/cape][Completion At Point Extensions]]

#+begin_src emacs-lisp
  (use-package cape
    :init
    (add-to-list 'completion-at-point-functions #'cape-abbrev)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-file)
    )
#+end_src

** vertico

[[https://github.com/minad/vertico][VERTical Interactive Completion]]

#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode))
#+end_src

** orderless

[[https://github.com/oantolin/orderless][orderless]]

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** marginalia

[[https://github.com/minad/marginalia][marginalia]]

#+begin_src emacs-lisp
  (use-package marginalia
    :init
    (marginalia-mode))
#+end_src

** which key

[[https://github.com/justbur/emacs-which-key][which-key]]

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.5))
#+end_src

* IDE-Features

** Shell Scripts
:PROPERTIES:
:ENABLES:  automatically check shell scripts via =shellcheck=
:END:

#+begin_src emacs-lisp
  (defun oe/flymake-show-buffer-diagnostics ()
    "Show the flymake buffer and focus on it."
    (interactive)
    (flymake-show-buffer-diagnostics)
    (other-window 1))

  (use-package flymake-shellcheck
    :commands flymake-shellcheck-load
    :init
    (add-hook 'sh-mode-hook 'flymake-shellcheck-load)
    (add-hook 'sh-mode-hook 'flymake-mode)
    :bind ("<f6>" . oe/flymake-show-buffer-diagnostics))
#+end_src

** CMake

#+begin_src emacs-lisp
  (use-package cmake-mode)
  (setq auto-mode-alist
        (append
         '(("CMakeLists\\.txt\\'" . cmake-mode))
         '(("\\.cmake\\'" . cmake-mode))
         auto-mode-alist))
#+end_src

** lsp

[[https://emacs-lsp.github.io/lsp-mode/][Language Server Protocol Support for Emacs]]

#+begin_src emacs-lisp
  (use-package lsp-mode)
  ;; (use-package lsp-mode
  ;;   :custom
  ;;   (lsp-completion-provider :none)
  ;;   )
#+end_src

** Tree-Sitter

[[https://emacs-tree-sitter.github.io][Emacs Tree Sitter]]

#+begin_src emacs-lisp
  (use-package tree-sitter)
  (use-package tree-sitter-langs)
#+end_src

* Disabled
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

